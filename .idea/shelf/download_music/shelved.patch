Index: app/src/main/java/com/example/boris/musicdownloader/presentations/DiscoverFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.boris.musicdownloader.presentations\n\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.example.boris.musicdownloader.R\n\n\nclass DiscoverFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_discover, container, false)\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/boris/musicdownloader/presentations/DiscoverFragment.kt	(revision a5c204eb4a6ca77828d210c4beb05717f02d632b)
+++ app/src/main/java/com/example/boris/musicdownloader/presentations/DiscoverFragment.kt	(date 1542169359976)
@@ -1,17 +1,68 @@
 package com.example.boris.musicdownloader.presentations
 
+import android.Manifest
+import android.content.pm.PackageManager
 import android.os.Bundle
+import android.os.Environment
+import android.support.v4.app.ActivityCompat
 import android.support.v4.app.Fragment
+import android.support.v4.content.ContextCompat
+import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.Button
+import android.widget.TextView
 import com.example.boris.musicdownloader.R
+import com.example.boris.musicdownloader.presenters.DiscoverFragmentPresenter
+import com.example.boris.musicdownloader.presenters.DiscoverFragmentPresenterImpl
+import java.io.File
+import java.util.regex.Pattern
 
 
 class DiscoverFragment : Fragment() {
 
-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
-                              savedInstanceState: Bundle?): View? {
-        return inflater.inflate(R.layout.fragment_discover, container, false)
+    private val TAG = "DiscoverFragment"
+    private val REQUEST_STORAGE = 123
+
+    private val presenter by lazy { DiscoverFragmentPresenterImpl(this) }
+    private lateinit var uriInput: TextView
+    private lateinit var downloadBtn: Button
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        val v = inflater.inflate(R.layout.fragment_discover, container, false)
+
+        uriInput = v.findViewById(R.id.url_input)
+        downloadBtn = v.findViewById(R.id.download_button) as Button
+        downloadBtn.setOnClickListener {
+            presenter.downloadButtonAction(uriInput.text.toString())
+        }
+
+        return v
+    }
+
+    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
+        when(requestCode) {
+            REQUEST_STORAGE -> {
+                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    presenter.downloadButtonAction(uriInput.text.toString())
+                }
+            }
+        }
+    }
+
+    fun haveWritePermission(): Boolean {
+        return (ActivityCompat.checkSelfPermission(context!!, Manifest.permission.WRITE_EXTERNAL_STORAGE)
+                == PackageManager.PERMISSION_GRANTED)
+    }
+
+    fun requestPermission() {
+        requestPermissions(
+            arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),
+            REQUEST_STORAGE
+        )
     }
 }
Index: app/src/main/res/layout/fragment_discover.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n             xmlns:tools=\"http://schemas.android.com/tools\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"match_parent\"\n             tools:context=\".presentations.DiscoverFragment\">\n\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:text=\"Discover Fragment\" />\n\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_discover.xml	(revision a5c204eb4a6ca77828d210c4beb05717f02d632b)
+++ app/src/main/res/layout/fragment_discover.xml	(date 1541732335854)
@@ -1,14 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-             xmlns:tools="http://schemas.android.com/tools"
-             android:layout_width="match_parent"
-             android:layout_height="match_parent"
-             tools:context=".presentations.DiscoverFragment">
+<android.support.constraint.ConstraintLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_height="match_parent"
+        android:layout_width="match_parent">
+
 
-    <!-- TODO: Update blank fragment layout -->
-    <TextView
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:text="Discover Fragment" />
+    <EditText
+            android:layout_width="297dp"
+            android:layout_height="49dp"
+            android:inputType="textUri"
+            android:hint="Uri"
+            android:id="@+id/url_input"
+            android:layout_marginTop="8dp"
+            app:layout_constraintTop_toTopOf="parent" android:layout_marginBottom="8dp"
+            android:layout_marginEnd="8dp"
+            app:layout_constraintEnd_toEndOf="parent" android:layout_marginStart="8dp"
+            app:layout_constraintStart_toStartOf="parent" app:layout_constraintHorizontal_bias="0.507"
+            app:layout_constraintVertical_bias="0.825" app:layout_constraintBottom_toTopOf="@+id/download_button"/>
+
+    <Button
+            android:id="@+id/download_button"
+            android:text="Download"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            app:layout_constraintStart_toStartOf="parent" android:layout_marginStart="8dp"
+            app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="8dp" android:layout_marginBottom="312dp"
+            app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintHorizontal_bias="0.501"/>
 
-</FrameLayout>
\ No newline at end of file
+</android.support.constraint.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/boris/musicdownloader/presenters/DiscoverFragmentPresenter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/boris/musicdownloader/presenters/DiscoverFragmentPresenter.kt	(date 1542560687099)
+++ app/src/main/java/com/example/boris/musicdownloader/presenters/DiscoverFragmentPresenter.kt	(date 1542560687099)
@@ -0,0 +1,303 @@
+package com.example.boris.musicdownloader.presenters
+
+import android.content.Context
+import android.os.AsyncTask
+import android.os.Environment
+import android.os.Environment.DIRECTORY_MUSIC
+import android.util.Log
+import com.example.boris.musicdownloader.presentations.DiscoverFragment
+import com.github.axet.vget.VGet
+import com.github.axet.vget.info.VideoFileInfo
+import com.github.axet.vget.info.VideoInfo
+import com.github.axet.vget.vhs.VimeoInfo
+import com.github.axet.vget.vhs.YouTubeInfo
+import com.github.axet.wget.SpeedInfo
+import com.github.axet.wget.info.DownloadInfo
+import com.github.hiteshsondhi88.libffmpeg.ExecuteBinaryResponseHandler
+import com.github.hiteshsondhi88.libffmpeg.FFmpeg
+import com.github.hiteshsondhi88.libffmpeg.exceptions.FFmpegCommandAlreadyRunningException
+import java.io.File
+import java.net.URL
+import java.util.concurrent.atomic.AtomicBoolean
+import java.util.regex.Pattern
+import com.github.hiteshsondhi88.libffmpeg.exceptions.FFmpegNotSupportedException
+import com.github.hiteshsondhi88.libffmpeg.LoadBinaryResponseHandler
+
+
+
+
+interface DiscoverFragmentPresenter {
+    fun downloadButtonAction(input: String)
+}
+
+class DiscoverFragmentPresenterImpl(val view: DiscoverFragment): DiscoverFragmentPresenter {
+
+    private val TAG = "DiscoverFragmentPresenter"
+
+    override fun downloadButtonAction(input: String) {
+        checkValidYoutubeUri(input)
+        downloadMusic(input)
+    }
+
+    private fun checkValidYoutubeUri(uri: String): Boolean {
+        val pattern = Pattern.compile("")
+        val matcher = pattern.matcher(uri)
+        Log.d(TAG, "link validity: ${matcher.matches()}")
+        return matcher.matches()
+    }
+
+    private fun downloadMusic(uri: String) {
+        if (!view.haveWritePermission()) {
+            view.requestPermission()
+            return
+        }
+
+        DownloadMusicTask(view.context!!).execute()
+    }
+
+    private fun externalStorageAvail(): Boolean {
+        return Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED
+    }
+}
+
+
+private class DownloadMusicTask(
+    private val mContext: Context
+): AsyncTask<URL, Unit, Unit>() {
+
+    override fun doInBackground(vararg params: URL?) {
+
+        try {
+            val sampleLink = "https://www.youtube.com/watch?v=WNu6fRo_7fg"
+            val linkUrl = URL(sampleLink)
+            val path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC)
+
+            val user = VGet.parser(linkUrl)
+            val videoInfo = user.info(linkUrl)
+            val title = videoInfo.title
+            val v = VGet(videoInfo, path)
+            val notify = VGetStatus(videoInfo)
+            val stop: AtomicBoolean = AtomicBoolean(false)
+
+            v.extract(user, stop, notify)
+
+            System.out.println("Title: " + videoInfo.title)
+            val list = videoInfo.info
+            if (list != null) {
+
+                for (d in list) {
+                    println("Download URL: " + d.source)
+                }
+            }
+
+            v.download(user, stop, notify)
+
+            val mp4File = File(videoInfo.info.get(0).targetFile.toString())
+            if (mp4File.exists()) {
+                Log.d("Boris", "Boris downloade complete delete file")
+                mp4File.delete()
+            } else {
+                Log.d("Boris", "Boris downloade complete not found ")
+            }
+
+//            val webmFile = File(videoInfo.info.get(1).targetFile.toString())
+//            Log.d("Boris", "Boris convert file ${webmFile.absolutePath}")
+//            val callback = object : IConvertCallback {
+//                override fun onSuccess(convertedFile: File) {
+//                    Log.d("Boris", "Boris convert sucess")
+//                }
+//
+//                override fun onFailure(error: Exception) {
+//                    Log.d("Boris", "Boris convert fail: $error")
+//                }
+//            }
+//            AndroidAudioConverter.load(mContext, object : ILoadCallback {
+//                override fun onSuccess() {
+//                    // Great!
+//                }
+//
+//                override fun onFailure(error: Exception) {
+//                    // FFmpeg is not supported by device
+//                }
+//            })
+//            AndroidAudioConverter.with(mContext)
+//                .setFile(webmFile)
+//                .setFormat(AudioFormat.MP3)
+//                .setCallback(callback)
+//                .convert()
+
+            val ffmpeg = FFmpeg.getInstance(mContext)
+            try {
+                ffmpeg.loadBinary(object : LoadBinaryResponseHandler() {
+
+                    override fun onStart() {}
+
+                    override fun onFailure() {}
+
+                    override fun onSuccess() {}
+
+                    override fun onFinish() {}
+                })
+            } catch (e: FFmpegNotSupportedException) {
+                // Handle if FFmpeg is not supported by device
+            }
+            Log.d("Boris", "ffmepg version: ${ffmpeg.deviceFFmpegVersion}")
+            try {
+                // to execute "ffmpeg -version" command you just need to pass "-version"
+                ffmpeg.execute(
+                    arrayOf(
+                        "-i",
+                        videoInfo.info.get(1).targetFile.toString(),
+                        Environment.getExternalStoragePublicDirectory(DIRECTORY_MUSIC).toString() + "/" + title + ".mp3"
+                    ), object : ExecuteBinaryResponseHandler() {
+
+                        override fun onStart() {}
+
+                        override fun onProgress(message: String?) {
+                            Log.d("ffmpegevent", "onProgress: " + message!!)
+                        }
+
+                        override fun onFailure(message: String?) {
+                            Log.d("ffmpegevent", "onProgress: " + message!!)
+                            Log.d("ffmpegevent", "onFailure: ")
+                        }
+
+                        override fun onSuccess(message: String?) {
+                            Log.d("ffmpegevent", "onSuccess: ")
+
+                        }
+
+                        override fun onFinish() {
+                            Log.d("ffmpegevent", "onProgress: Finished")
+                        }
+                    })
+            } catch (e: FFmpegCommandAlreadyRunningException) {
+                // Handle if FFmpeg is already running
+                e.printStackTrace()
+            }
+
+
+        } catch (e: Exception) {
+            e.printStackTrace()
+            throw e
+        }
+    }
+}
+
+internal class VGetStatus(var videoinfo: VideoInfo) : Runnable {
+    var last: Long = 0
+
+    var map: MutableMap<VideoFileInfo, SpeedInfo> = HashMap()
+
+    fun getSpeedInfo(dinfo: VideoFileInfo): SpeedInfo {
+        var speedInfo = map[dinfo]
+        if (speedInfo == null) {
+            speedInfo = SpeedInfo()
+            speedInfo!!.start(dinfo.count)
+            map[dinfo] = speedInfo!!
+        }
+        return speedInfo
+    }
+
+    override fun run() {
+        val dinfoList = videoinfo.info
+
+        // notify app or save download state
+        // you can extract information from DownloadInfo info;
+        when (videoinfo.state) {
+            VideoInfo.States.EXTRACTING, VideoInfo.States.EXTRACTING_DONE, VideoInfo.States.DONE -> {
+                if (videoinfo is YouTubeInfo) {
+                    val i = videoinfo as YouTubeInfo
+                    println((videoinfo.getState()).toString() + " " + i.videoQuality)
+                } else if (videoinfo is VimeoInfo) {
+                    val i = videoinfo as VimeoInfo
+                    println((videoinfo.getState()).toString() + " " + i.videoQuality)
+                } else {
+                    println("downloading unknown quality")
+                }
+                for (d in videoinfo.info) {
+                    val speedInfo = getSpeedInfo(d)
+                    speedInfo.end(d.count)
+                    println(
+                        String.format(
+                            "file:%d - %s (%s)", dinfoList!!.indexOf(d), d.targetFile,
+                            formatSpeed(speedInfo.averageSpeed.toLong())
+                        )
+                    )
+                }
+            }
+            VideoInfo.States.ERROR -> {
+                println((videoinfo.getState()).toString() + " " + videoinfo.delay)
+
+                if (dinfoList != null) {
+                    for (dinfo in dinfoList!!) {
+                        println(
+                            "file:" + dinfoList!!.indexOf(dinfo) + " - " + dinfo.exception + " delay:"
+                                    + dinfo.delay
+                        )
+                    }
+                }
+            }
+            VideoInfo.States.RETRYING -> {
+                println((videoinfo.getState()).toString() + " " + videoinfo.delay)
+
+                if (dinfoList != null) {
+                    for (dinfo in dinfoList!!) {
+                        println(
+                            ("file:" + dinfoList!!.indexOf(dinfo) + " - " + dinfo.state + " "
+                                    + dinfo.exception + " delay:" + dinfo.delay)
+                        )
+                    }
+                }
+            }
+            VideoInfo.States.DOWNLOADING -> {
+                val now = System.currentTimeMillis()
+                if (now - 1000 > last) {
+                    last = now
+
+                    var parts = ""
+
+                    for (dinfo in dinfoList!!) {
+                        val speedInfo = getSpeedInfo(dinfo)
+                        speedInfo.step(dinfo.count)
+
+                        val pp = dinfo.parts
+                        if (pp != null) {
+                            // multipart download
+                            for (p in pp!!) {
+                                if (p.state.equals(DownloadInfo.Part.States.DOWNLOADING)) {
+                                    parts += String.format(
+                                        "part#%d(%.2f) ", p.number,
+                                        p.count / p.length.toFloat()
+                                    )
+                                }
+                            }
+                        }
+                        println(
+                            String.format(
+                                "file:%d - %s %.2f %s (%s)", dinfoList!!.indexOf(dinfo),
+                                videoinfo.state, dinfo.count / dinfo.length.toFloat(), parts,
+                                formatSpeed(speedInfo.currentSpeed.toLong())
+                            )
+                        )
+                    }
+                }
+            }
+            else -> {
+            }
+        }
+    }
+}
+
+fun formatSpeed(s: Long): String {
+    if (s > 0.1 * 1024.0 * 1024.0 * 1024.0) {
+        val f = s.toFloat() / 1024f / 1024f / 1024f
+        return String.format("%.1f GB/s", f)
+    } else if (s > 0.1 * 1024.0 * 1024.0) {
+        val f = s.toFloat() / 1024f / 1024f
+        return String.format("%.1f MB/s", f)
+    } else {
+        val f = s / 1024f
+        return String.format("%.1f kb/s", f)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/boris/musicdownloader/data/Song.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.boris.musicdownloader.data\n\nimport android.content.Context\nimport android.net.Uri\nimport android.util.Log\n\ndata class Song(\n    val id: Long,\n    val title: String,\n    val artist: String\n)\n\nclass SongRepository {\n\n    private val TAG = \"Song Repository\"\n\n    private var songList: ArrayList<Song> = ArrayList()\n    private var curSongPos: Int = 0\n\n    fun fetchSongsFromSystem(context: Context): ArrayList<Song> {\n        val musicCursor = context.contentResolver.query(\n            musicUri, null, null, null, null)\n\n        Log.d(TAG, \"music cursor count = ${musicCursor.count}\")\n        if (musicCursor != null) {\n            //get columns\n            val idColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media._ID)\n            val titleColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media.TITLE)\n            val artistColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media.ARTIST)\n            //add songs to list\n            val songs = mutableListOf<Song>()\n            while (musicCursor.moveToNext()) {\n                val thisId = musicCursor.getLong(idColumn)\n                val thisTitle = musicCursor.getString(titleColumn)\n                val thisArtist = musicCursor.getString(artistColumn)\n                songs.add(Song(thisId, thisTitle, thisArtist))\n            }\n            songList = songs as ArrayList<Song>\n        }\n\n        return songList\n    }\n\n    fun getSongList(): ArrayList<Song> {\n        return songList\n    }\n\n    fun setCurSongPosition(pos: Int) {\n        curSongPos = pos\n    }\n\n    fun getCurSong(): Song {\n        return songList.get(curSongPos)\n    }\n\n    companion object {\n        private val musicUri: Uri = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI\n        val instance by lazy { SongRepository() }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/boris/musicdownloader/data/Song.kt	(revision a5c204eb4a6ca77828d210c4beb05717f02d632b)
+++ app/src/main/java/com/example/boris/musicdownloader/data/Song.kt	(date 1541884146985)
@@ -21,18 +21,18 @@
         val musicCursor = context.contentResolver.query(
             musicUri, null, null, null, null)
 
-        Log.d(TAG, "music cursor count = ${musicCursor.count}")
-        if (musicCursor != null) {
+        Log.d(TAG, "music cursor count = ${musicCursor?.count ?: 0}")
+        musicCursor?.let {
             //get columns
             val idColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media._ID)
             val titleColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media.TITLE)
             val artistColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media.ARTIST)
             //add songs to list
             val songs = mutableListOf<Song>()
-            while (musicCursor.moveToNext()) {
-                val thisId = musicCursor.getLong(idColumn)
-                val thisTitle = musicCursor.getString(titleColumn)
-                val thisArtist = musicCursor.getString(artistColumn)
+            while (it.moveToNext()) {
+                val thisId = it.getLong(idColumn)
+                val thisTitle = it.getString(titleColumn)
+                val thisArtist = it.getString(artistColumn)
                 songs.add(Song(thisId, thisTitle, thisArtist))
             }
             songList = songs as ArrayList<Song>
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.example.boris.musicdownloader\">\n\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n    <application\n            android:allowBackup=\"true\"\n            android:icon=\"@mipmap/ic_launcher\"\n            android:label=\"@string/app_name\"\n            android:roundIcon=\"@mipmap/ic_launcher_round\"\n            android:supportsRtl=\"true\"\n            android:theme=\"@style/AppTheme\">\n        <activity\n                android:name=\".presentations.MainActivity\"\n                android:launchMode=\"singleTop\"\n                android:screenOrientation=\"portrait\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n\n        <service android:name=\".services.MusicPlaybackService\" >\n            <intent-filter>\n                <action android:name=\"android.media.browse.MediaBrowserService\" />\n                <action android:name=\"android.media.AUDIO_BECOMING_NOISY\" />\n                <action android:name=\"android.intent.action.MEDIA_BUTTON\" />\n            </intent-filter>\n        </service>\n\n        <receiver android:name=\"android.support.v4.media.session.MediaButtonReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MEDIA_BUTTON\" />\n                <action android:name=\"android.media.AUDIO_BECOMING_NOISY\" />\n            </intent-filter>\n        </receiver>\n    </application>\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision a5c204eb4a6ca77828d210c4beb05717f02d632b)
+++ app/src/main/AndroidManifest.xml	(date 1542253000322)
@@ -2,8 +2,10 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.example.boris.musicdownloader">
 
+    <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
     <application
             android:allowBackup="true"
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 28\n    defaultConfig {\n        applicationId \"com.example.boris.musicdownloader\"\n        minSdkVersion 26\n        targetSdkVersion 28\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'com.android.support:appcompat-v7:28.0.0'\n    implementation 'com.android.support:support-media-compat:28.0.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.3'\n    implementation 'com.android.support:design:28.0.0'\n    implementation 'com.android.support:support-v4:28.0.0'\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\n\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision a5c204eb4a6ca77828d210c4beb05717f02d632b)
+++ app/build.gradle	(date 1542558901591)
@@ -13,6 +13,7 @@
         versionCode 1
         versionName "1.0"
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+        multiDexEnabled true
     }
     buildTypes {
         release {
@@ -20,11 +21,26 @@
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
+//    splits {
+//        abi {
+//            enable true
+//            reset()
+//            include 'x86', 'armeabi-v7a', 'x86_64'
+//            universalApk true
+//        }
+//    }
 }
+//
+//repositories {
+//    maven {
+//        url "https://jitpack.io"
+//    }
+//}
 
 dependencies {
     implementation fileTree(dir: 'libs', include: ['*.jar'])
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+    implementation 'com.android.support:multidex:1.0.3'
     implementation 'com.android.support:appcompat-v7:28.0.0'
     implementation 'com.android.support:support-media-compat:28.0.0'
     implementation 'com.android.support.constraint:constraint-layout:1.1.3'
@@ -32,7 +48,16 @@
     implementation 'com.android.support:support-v4:28.0.0'
     implementation 'com.android.support:recyclerview-v7:28.0.0'
 
+    implementation group: 'com.github.axet', name: 'vget', version: '1.2.6'
+//    implementation 'com.github.adrielcafe:AndroidAudioConverter:0.0.8'
+//    implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'
+    implementation 'com.writingminds:FFmpegAndroid:0.3.2'
+
     testImplementation 'junit:junit:4.12'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+
+    configurations {
+        all*.exclude group: 'xmlpull', module: 'xmlpull'
+    }
 }
